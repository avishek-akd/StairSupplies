<?xml version="1.0"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" initialize="init();" paddingLeft="8" width="100%" height="100%">


	<mx:Script source="../../../Util.as"/>
	<mx:Script>
		<![CDATA[
			import com.stairsupplies.events.ShipmentClickedEvent;
			import com.stairsupplies.events.ShipmentPrintShippingLabelEvent;
			
			import flash.events.Event;
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Menu;
			import mx.controls.PopUpMenuButton;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.DropdownEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.managers.PopUpManager;
			import mx.managers.PopUpManagerChildList;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectProxy;
			
	
			[Bindable]
			public var shipments:ArrayCollection;

	
			private var _waiting_for_shipments:Boolean = false;
			/*  Cache shipment information  */
			private var _shipments_retrieved:Boolean = false;
			private var shipmentsMenu:PopUpMenuButton = null;
							
		
			private function init():void {
				addEventListener(FlexEvent.DATA_CHANGE, handleDataChange);

				shippingService.addEventListener(FaultEvent.FAULT, FlexGlobals.topLevelApplication.faultHandler);
                
				printShippingLabel.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void {
					dispatchEvent(new ShipmentPrintShippingLabelEvent(ShipmentPrintShippingLabelEvent.SHIPMENT_PRINT_SHIPPING_LABEL, data.OrderID));
        		});
			}
			
			
			private function handleShipmentMenuOpen(ev:Event):void {
				if( ! _shipments_retrieved ) {
					shipmentsMenu.close();	
				}
				
				if( ! _shipments_retrieved && ! _waiting_for_shipments ) {
					shippingService.getAllShipments(data.OrderID);
					_waiting_for_shipments = true;
				}
			}
	
			
			private  function handleDataChange(ev:FlexEvent):void {
				_shipments_retrieved = false;
				shipments = null;

				if( shipmentsMenu ) {
					removeChild(shipmentsMenu);	
				}
				shipmentsMenu = null;
				
				if( data.NumberOfShipments > 0 ) {
					shipmentsMenu = new PopUpMenuButton();
					shipmentsMenu.labelFunction = shipmentLabel;
					shipmentsMenu.label = "";
					shipmentsMenu.toolTip = data.NumberOfShipments + (data.NumberOfShipments == 1 ? " shipment" : " shipments");
					if( data.hasStagedShipment ) {
						shipmentsMenu.styleName = "shipmentsWithStaged";
					} else {
						shipmentsMenu.styleName = "shipments";
					}
					shipmentsMenu.addEventListener(ListEvent.ITEM_CLICK, handleShipmentInfo);
					shipmentsMenu.addEventListener(DropdownEvent.OPEN, handleShipmentMenuOpen);
					addChild( shipmentsMenu );
				}
			}
			
			
			private function handleShipmentInfo(event:MenuEvent):void {
				if( event.item.OrderShipment_id ) {
					dispatchEvent(new ShipmentClickedEvent(ShipmentClickedEvent.SHIPMENT_CLICKED, event.item.OrderShipment_id));
				}
			}

			
			private function receiveShipmentsInfo(event:ResultEvent):void {
				shipments = convertToBindable( event.result as ArrayCollection );
				shipmentsMenu.dataProvider = shipments;
				
				_waiting_for_shipments = false;
				_shipments_retrieved = true;
				
				/*  We received the items from the back-end,
					calculate manually where the PopUp is placed horizontally
				*/
		        var point:Point = new Point(shipmentsMenu.x, shipmentsMenu.y);
		        point = localToGlobal(point);
				var maxPopUpWidth:int = 0;
				shipments.source.forEach(function(item:*, index:int, arr:Array):void {
							var currentWidth:int = (shipmentsMenu.popUp as Menu).measureText(shipmentLabel(item)).width; 
							if( maxPopUpWidth < currentWidth ) {
								maxPopUpWidth = currentWidth;
							}
						});
				/*  Popup has an additional 46 pixels (determined empirically)  */
				maxPopUpWidth += 46;
				
	            point.x = Math.min( point.x, screen.right - maxPopUpWidth);
	            point.x = Math.max( point.x, 0);

				shipmentsMenu.popUp.x = point.x;
				shipmentsMenu.validateNow();
				
				shipmentsMenu.open();
			}

			
			private function shipmentLabel(item:Object):String {
				if( _shipments_retrieved )
					return item.ShipmentNumber + ' -- ' + item.ShippingMethod
							+ ' (' + dateFormatter.format(item.RecordCreated) + ') '
							+ (item.isShipped == 0 ? '-- STAGED' : '');
				else
					return "";
			}
		]]>
	</mx:Script>
	
	
	<mx:RemoteObject id="shippingService" showBusyCursor="true" destination="ColdFusion"
					 source="{FlexGlobals.topLevelApplication.cfcRootPath}com.stairsupplies.ShippingService">
		<mx:method name="getAllShipments" result="receiveShipmentsInfo(event)"/>		
	</mx:RemoteObject>


	<mx:DateFormatter id="dateFormatter" formatString="MM/DD/YY"/>
	<mx:DateFormatter id="timeFormatter" formatString="L:NN A"/>

	
	<mx:Button id="printShippingLabel" icon="@Embed(source='assets/print.png')" label="" toolTip="Print Shipping Label" />
</mx:HBox>